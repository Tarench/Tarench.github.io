(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{339:function(t,r,a){"use strict";a.r(r);var s=a(1),e=Object(s.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"lecture-1-introduction-to-computer-vision"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lecture-1-introduction-to-computer-vision"}},[t._v("#")]),t._v(" Lecture 1：Introduction to Computer Vision")]),t._v(" "),r("blockquote",[r("p",[t._v("计算机视觉系统 = 视觉传感器 + 计算平台")]),t._v(" "),r("ul",[r("li",[t._v("视觉传感器：采集感知数据并传送给计算平台")]),t._v(" "),r("li",[t._v("计算平台：运行有为解决某一计算机视觉问题而设计的计算程序的计算机")])])]),t._v(" "),r("hr"),t._v(" "),r("h1",{attrs:{id:"第2章-图像全景拼接问题概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第2章-图像全景拼接问题概述"}},[t._v("#")]),t._v(" 第2章 图像全景拼接问题概述")]),t._v(" "),r("h2",{attrs:{id:"_2-1-问题的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-问题的定义"}},[t._v("#")]),t._v(" 2.1 问题的定义")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313080530.png",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"_2-2-方案流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-方案流程"}},[t._v("#")]),t._v(" 2.2 方案流程")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313080907.png",alt:""}})]),t._v(" "),r("ol",[r("li",[t._v("特征点检测\n"),r("ul",[r("li",[t._v("利用特征点算法在I~1~和I~2~中检测出具有较高区分性的特征点，检测到的图像特征点最终的表达形式为图像中的二维坐标位置")])])]),t._v(" "),r("li",[t._v("创建特征点描述子\n"),r("ul",[r("li",[t._v("为了能进行特征点匹配从而得到 I~1~ 和 I~2~ 特征点间的对应关系，需要为每一个特征点构造它的描述子")]),t._v(" "),r("li",[t._v("一个特征点 x 的描述子 d 是一个基于 x 的局部图像信息所构造出来的向量")]),t._v(" "),r("li",[t._v("描述子的特性：如果 I~1~ 中的特征点 x 和 I~2~ 中的特征点 x' 是对应的特征点（即，它们是物理场景中同一个点的像），那么 x 的描述子（基于 I~1~ 中 x 周围的局部图像信息构造）和 x' 的描述子（基于 I~2~ 中 x' 周围的局部图像信息构造）应该是相同的；反之，则不同。")])])]),t._v(" "),r("li",[t._v("特征点匹配\n"),r("ul",[r("li",[t._v("设计基于描述子信息的特征点匹配算法")]),t._v(" "),r("li",[t._v("课采用随机采样一致性算法，对抗外点所带来的的干扰")])])]),t._v(" "),r("li",[t._v("几何变换估计\n"),r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313082148.png",alt:""}})]),t._v(" "),r("li",[t._v("坐标变换\n"),r("ul",[r("li",[t._v("当得到了 H 以后，我们便可以把 I~1~ 中的每个像素点 x~i~ 变换到新的位置 Hx~i~ ，以对齐 I~1~ 和 I~2~。再经过一些后处理操作，便完成了 I~1~ 和 I~2~ 的全景拼接")]),t._v(" "),r("li",[t._v("数字图像的像素坐标都是用整数表示的，也就是说 x~i~ 是个整数，那么目的坐标 Hx~i~ 几乎肯定是个浮点数，那么 x~i~ 这个位置在图像上就没办法唯一确定——"),r("strong",[t._v("使用图像的插值技术")])])])])]),t._v(" "),r("hr"),t._v(" "),r("h1",{attrs:{id:"第3章-线性几何变换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第3章-线性几何变换"}},[t._v("#")]),t._v(" 第3章 线性几何变换")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313083403.png",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"_3-1-平面上的线性集合变换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-平面上的线性集合变换"}},[t._v("#")]),t._v(" 3.1 平面上的线性集合变换")]),t._v(" "),r("h3",{attrs:{id:"_3-1-1-旋转变换-rotation-transformation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-旋转变换-rotation-transformation"}},[t._v("#")]),t._v(" 3.1.1 旋转变换(Rotation transformation)")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313083521.png",alt:""}})]),t._v(" "),r("ul",[r("li",[t._v("为了便于表达形式的统一和扩展，我们使用齐次坐标的方式来表达点的位置。对于二维平面上的点，其齐次坐标的表示为一个三维向量 (x~1~, x~2~, x~3~)^T^。如果 x~3~ = 0，则说明这个点为一个无穷远点；反之则说明该点为一个正常点")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313084902.png",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"_3-1-2-欧式变换-euclidean-transformation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-欧式变换-euclidean-transformation"}},[t._v("#")]),t._v(" 3.1.2 欧式变换(Euclidean transformation)")]),t._v(" "),r("ul",[r("li",[t._v("在CV领域，把同时考虑了旋转与平移的几何变换称为欧氏变换")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313085109.png",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"_3-1-3-相似变换-simailarity-transformation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-相似变换-simailarity-transformation"}},[t._v("#")]),t._v(" 3.1.3 相似变换(Simailarity transformation)")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313085200.png",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"_3-1-4-仿射变换-affine-transformation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-仿射变换-affine-transformation"}},[t._v("#")]),t._v(" 3.1.4 仿射变换(Affine transformation)")]),t._v(" "),r("ul",[r("li",[t._v("只要求左上角2*2的子矩阵是个非奇异矩阵")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313090847.png",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"_3-1-5射影变换-projective-transformation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5射影变换-projective-transformation"}},[t._v("#")]),t._v(" 3.1.5射影变换(Projective transformation)")]),t._v(" "),r("ul",[r("li",[t._v("只要求矩阵 H 是个非奇异的3*3的矩阵")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313091008.png",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("h1",{attrs:{id:"第4章-特征点检测与匹配"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第4章-特征点检测与匹配"}},[t._v("#")]),t._v(" 第4章 特征点检测与匹配")]),t._v(" "),r("h2",{attrs:{id:"_4-1-harris-corner-及其描述子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-harris-corner-及其描述子"}},[t._v("#")]),t._v(" 4.1 Harris corner 及其描述子")]),t._v(" "),r("h3",{attrs:{id:"_4-1-1-harris-corner-detecter算法设计思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-harris-corner-detecter算法设计思路"}},[t._v("#")]),t._v(" 4.1.1 Harris corner detecter算法设计思路")]),t._v(" "),r("ul",[r("li",[t._v("图像中的角点是一类非常稳定、稀疏、特殊的点，可以作为图像的特征点")]),t._v(" "),r("li",[t._v("图像中角点的定义：在点 x 周围取一个邻 域窗口 W，无论沿哪个方向移动 W，新窗口 W' 所覆盖的图像区域与旧窗口 W 所覆盖的图像区域在像素值上都会有很大变化，那么点 x 即为角点")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Tarench/image@master/20230313091557.png",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"_4-1-2-harris-corner-detecter算法实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-harris-corner-detecter算法实现"}},[t._v("#")]),t._v(" 4.1.2 Harris corner detecter算法实现")])])}),[],!1,null,null,null);r.default=e.exports}}]);